classdef UserData

    properties
        %-----------------------------------------------------------------%
        customPlayback        = struct('Type', 'auto', 'Parameters', [])

        occMethod             = struct('RelatedIndex', [], 'SelectedIndex', [], 'CacheIndex', [])
        occCache              = struct('Info', {}, 'THR', {}, 'Data', {})
        occInfIntegration     = []

        channelLibIndex       = []
        channelManual         = struct('Name', {}, 'Band', {}, 'FirstChannel', {}, 'LastChannel', {}, 'StepWidth', {}, 'ChannelBW', {}, 'FreqList', {}, 'Reference', {}, 'FindPeaksName', {})

        bandLimitsStatus      = false
        bandLimitsTable       = table('Size', [0, 2],                        ...
                                      'VariableTypes', {'double', 'double'}, ...
                                      'VariableNames', {'FreqStart', 'FreqStop'})

        Emissions             = table(uint32([]), [], [], true(0,1), string.empty,                                     ...
                                      struct('Detection', {}, 'Classification', {}, 'Occupancy', {}, 'BandWidth', {}), ...
                                      struct('Level', {}, 'FCO', {}, 'FBO', {}, 'BandWidth', {}),                      ...
                                      struct('autoSuggested', {}, 'userModified', {}),                                 ...
                                      struct('autoSuggested', {}, 'userModified', {}),                                 ...
                                      struct('DriveTest', {}, 'RFDataHub', {}, 'SignalAnalysis', {}),                  ...
                                      'VariableNames', {'idxFrequency', 'Frequency', 'BW_kHz', 'isTruncated', 'Description', 'Algorithms', 'Measures', 'ChannelAssigned', 'Classification', 'auxAppData'})

        measCalibration       = table('Size', [0, 4],                                    ...
                                      'VariableTypes', {'cell', 'cell', 'cell', 'cell'}, ...
                                      'VariableNames', {'Name', 'Type', 'oldUnitLevel', 'newUnitLevel'})

        reportFlag            = false
        reportAlgorithms      = struct('Detection',      model.UserData.getFieldTemplate('DefaultAlgorithm: Detection'),      ...
                                       'Classification', model.UserData.getFieldTemplate('DefaultAlgorithm: Classification'), ...
                                       'Occupancy',      model.UserData.getFieldTemplate('DefaultAlgorithm: Occupancy'))
        reportPeaksTable      = []
        reportExternalFiles   = table('Size', [0, 4],                                    ...
                                      'VariableTypes', {'cell', 'cell', 'cell', 'int8'}, ...
                                      'VariableNames', {'Type', 'Tag', 'Filename', 'ID'});
        reportChannelTable    = []
        reportChannelAnalysis = []

        AntennaHeight         = []

        % Registrar operações não contempladas nas outras propriedades. Por
        % exemplo: filtragem temporal do fluxo espectral.
        LOG                   = {}
    end

    
    methods (Static = true)
        %-----------------------------------------------------------------%
        function fieldTemplate = getFieldTemplate(dataType, varargin)
            arguments
                dataType {mustBeMember(dataType, {'Measures:Level',                   ...
                                                  'Measures:BandWidth',               ...
                                                  'Measures:FCO',                     ...
                                                  'Measures:FBO',                     ...
                                                  'ChannelAssigned',                  ...
                                                  'Classification',                   ...
                                                  'DefaultAlgorithm: Detection',      ...
                                                  'DefaultAlgorithm: Classification', ...
                                                  'DefaultAlgorithm: Occupancy',      ...
                                                  'DefaultAlgorithm: BandWidth'})}
            end

            arguments (Repeating)
                varargin
            end

            switch dataType
                case 'Measures:Level'
                    fieldTemplate = struct('FreqCenter_Min',      {},  ...
                                           'FreqCenter_Mean',     {},  ...
                                           'FreqCenter_Max',      {},  ...
                                           'Channel_Min',         {},  ...
                                           'Channel_Mean',        {},  ...
                                           'Channel_Max',         {});

                case 'Measures:BandWidth'
                    fieldTemplate = struct('Min',                 {},  ...
                                           'Mean',                {},  ...
                                           'Max',                 {});

                case 'Measures:FCO'
                    fieldTemplate = struct('FreqCenter_Infinite', {},  ...
                                           'Channel_Infinite',    {},  ...
                                           'Channel_Finite_Min',  {},  ...
                                           'Channel_Finite_Mean', {},  ...
                                           'Channel_Finite_Max',  {});

                case 'Measures:FBO'
                    fieldTemplate = struct('Channel_Min',         {},  ...
                                           'Channel_Mean',        {},  ...
                                           'Channel_Max',         {});

                case 'ChannelAssigned'
                    chAssigned    = util.emissionChannel(varargin{:});
                    fieldTemplate = struct('autoSuggested', chAssigned, ...
                                           'userModified',  chAssigned);

                case 'Classification'
                    emissionInfo  = util.emissionClassification(varargin{:});
                    fieldTemplate = struct('autoSuggested', emissionInfo, ...
                                           'userModified',  emissionInfo);

                case 'DefaultAlgorithm: Detection'
                    fieldTemplate = struct('ManualMode', 0,                         ...
                                           'Algorithm', 'FindPeaks+OCC',            ...
                                           'Parameters', struct('Distance_kHz', 25, ... % kHz
                                                                'BW_kHz',       10, ... % kHz
                                                                'Prominence1',  10, ...
                                                                'Prominence2',  30, ...
                                                                'meanOCC',      10, ...
                                                                'maxOCC',       67));

                case 'DefaultAlgorithm: Classification'
                    fieldTemplate = RF.Classification.ParametersDefault;

                case 'DefaultAlgorithm: Occupancy'
                    fieldTemplate = RF.Occupancy.ParametersDefault();

                case 'DefaultAlgorithm: BandWidth'
                    fieldTemplate = [];
            end
        end
    end
end